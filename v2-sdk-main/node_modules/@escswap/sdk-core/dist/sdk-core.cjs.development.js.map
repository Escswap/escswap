{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH9', 'Wrapped Ether'),\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped Binance'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH9', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH9', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","chainId","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","Token","sortsBefore","toLowerCase","WETH9","Ether","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}