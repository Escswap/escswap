{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH9', 'Wrapped Ether'),\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped Binance'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH9', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH9', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH9', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH9', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","this","tryParseFraction","fractionish","Error","_proto","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","currency","_this","lessThanOrEqual","decimalScale","exponentiate","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","_Fraction","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","chainId","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","Token","sortsBefore","toLowerCase","WETH9","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}